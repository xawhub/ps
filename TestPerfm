function PerformanceTest() {
    var testSizes = [10, 100, 1000, 10000, 100000];

    for (var i = 0; i < testSizes.length; i++) {
        var size = testSizes[i];
        TheApplication().Trace("ðŸ”¹ Test dla " + size + " rekordÃ³w:");

        // ðŸ“Œ **Test: PropertySetBuilder**
        var builder = new PropertySetBuilder();
        
        // âœ… Tworzenie PropertySet
        var start1 = new Date().getTime();
        for (var j = 0; j < size; j++) {
            builder.create("Node" + j, "Root");
        }
        var end1 = new Date().getTime();
        TheApplication().Trace("  âœ… Tworzenie PropertySetBuilder: " + (end1 - start1) + " ms");

        // âœ… Ustawianie struktury PropertySetBuilder
        var start2 = new Date().getTime();
        for (var j = 0; j < size; j++) {
            builder.setStructure("Node" + j, "Key1=Value" + j + ";Key2=Extra" + j);
        }
        var end2 = new Date().getTime();
        TheApplication().Trace("  âœ… Ustawianie struktury PropertySetBuilder: " + (end2 - start2) + " ms");

        // âœ… Pobieranie PropertySet PropertySetBuilder
        var start3 = new Date().getTime();
        var lastNode = builder.getPropertySet("Node" + (size - 1));
        var end3 = new Date().getTime();
        TheApplication().Trace("  âœ… Pobieranie PropertySetBuilder: " + (end3 - start3) + " ms");

        // âœ… Pobieranie wÅ‚aÅ›ciwoÅ›ci PropertySetBuilder
        var start4 = new Date().getTime();
        var props = builder.getProperties("Node" + (size - 1));
        var end4 = new Date().getTime();
        TheApplication().Trace("  âœ… Pobieranie wÅ‚aÅ›ciwoÅ›ci PropertySetBuilder: " + (end4 - start4) + " ms");

        TheApplication().Trace("---------------------------------------");

        // ðŸ“Œ **Test: Standardowy PropertySet**
        var rootPs = TheApplication().NewPropertySet();
        rootPs.SetType("Root");

        // âœ… Tworzenie standardowego PropertySet
        var start5 = new Date().getTime();
        for (var k = 0; k < size; k++) {
            var child = TheApplication().NewPropertySet();
            child.SetType("Node" + k);
            rootPs.AddChild(child);
        }
        var end5 = new Date().getTime();
        TheApplication().Trace("  âœ… Tworzenie standardowego PropertySet: " + (end5 - start5) + " ms");

        // âœ… Ustawianie wÅ‚aÅ›ciwoÅ›ci w standardowym PropertySet
        var start6 = new Date().getTime();
        for (var k = 0; k < size; k++) {
            var child = rootPs.GetChild(k);
            child.SetProperty("Key1", "Value" + k);
            child.SetProperty("Key2", "Extra" + k);
        }
        var end6 = new Date().getTime();
        TheApplication().Trace("  âœ… Ustawianie struktury standardowego PropertySet: " + (end6 - start6) + " ms");

        // âœ… Pobieranie PropertySet w standardowy sposÃ³b
        var start7 = new Date().getTime();
        var nodeFound = null;
        for (var c = 0; c < rootPs.GetChildCount(); c++) {
            var childNode = rootPs.GetChild(c);
            if (childNode.GetType() === "Node" + (size - 1)) {
                nodeFound = childNode;
                break;
            }
        }
        var end7 = new Date().getTime();
        TheApplication().Trace("  âœ… Pobieranie standardowego PropertySet: " + (end7 - start7) + " ms");

        // âœ… Pobieranie wÅ‚aÅ›ciwoÅ›ci w standardowy sposÃ³b
        var start8 = new Date().getTime();
        var foundProps = {};
        if (nodeFound) {
            foundProps["Key1"] = nodeFound.GetProperty("Key1");
            foundProps["Key2"] = nodeFound.GetProperty("Key2");
        }
        var end8 = new Date().getTime();
        TheApplication().Trace("  âœ… Pobieranie wÅ‚aÅ›ciwoÅ›ci standardowego PropertySet: " + (end8 - start8) + " ms");

        TheApplication().Trace("---------------------------------------");
    }
}
