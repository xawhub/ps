function PropertySetBuilder() {
    var app = TheApplication();
    this.root = app.NewPropertySet();
    this.root.SetType("Root");
    this.propertySets = {};
    this.propertySets["Root"] = this.root;
}

// 📌 **Tworzenie nowego PropertySet**
PropertySetBuilder.prototype.create = function(name, parentName) {
    var parent;
    if (this.propertySets[parentName]) {
        parent = this.propertySets[parentName];
    } else {
        parent = this.root;
    }

    var child = TheApplication().NewPropertySet();
    child.SetType(name);
    parent.AddChild(child);
    this.propertySets[name] = child;
    return child;
};

// 📌 **Ustawianie struktury PropertySet per rodzic**
PropertySetBuilder.prototype.setStructure = function(name, structure) {
    var ps;
    if (this.propertySets[name]) {
        ps = this.propertySets[name];
    } else {
        TheApplication().RaiseErrorText("Błąd: PropertySet '" + name + "' nie istnieje.");
        return;
    }

    var pairs = structure.split(";");
    var i;
    for (i = 0; i < pairs.length; i++) {
        var keyValue = pairs[i].split("=");
        if (keyValue.length === 2) {
            ps.SetProperty(keyValue[0], keyValue[1]);
        }
    }
};

// 📌 **Ustawianie struktury całej hierarchii**
PropertySetBuilder.prototype.setHierarchy = function(inputs) {
    var propNames = this._getPropertyNames(inputs);
    var i;
    for (i = 0; i < propNames.length; i++) {
        var name = propNames[i];
        this.create(name, "Root");
        this.setStructure(name, inputs.GetProperty(name));
    }
};

// 📌 **Łączenie kilku PropertySet w jeden (dowolny parent)**
PropertySetBuilder.prototype.mergeSets = function(targetParent, setsArray) {
    var parent;
    if (this.propertySets[targetParent]) {
        parent = this.propertySets[targetParent];
    } else {
        parent = this.root;
    }

    var i;
    for (i = 0; i < setsArray.length; i++) {
        var child;
        if (this.propertySets[setsArray[i]]) {
            child = this.propertySets[setsArray[i]];
            parent.AddChild(child);
        }
    }
};

// 📌 **Pobieranie PropertySet**
PropertySetBuilder.prototype.getPropertySet = function(name) {
    if (this.propertySets[name]) {
        return this.propertySets[name];
    } else {
        return null;
    }
};

// 📌 **Pobieranie właściwości z PropertySet**
PropertySetBuilder.prototype.getProperties = function(name) {
    var ps;
    if (this.propertySets[name]) {
        ps = this.propertySets[name];
    } else {
        return null;
    }

    var propNames = this._getPropertyNames(ps);
    var properties = {};
    var i;
    for (i = 0; i < propNames.length; i++) {
        properties[propNames[i]] = ps.GetProperty(propNames[i]);
    }
    return properties;
};

// 📌 **Pobieranie głównego PropertySet**
PropertySetBuilder.prototype.get = function() {
    return this.root;
};

// 📌 **Funkcja pomocnicza do pobierania nazw właściwości**
PropertySetBuilder.prototype._getPropertyNames = function(ps) {
    var propNames = [];
    var propEnum = ps.GetFirstProperty();

    while (propEnum !== "") {
        propNames.push(propEnum);
        propEnum = ps.GetNextProperty();
    }
    return propNames;
};
