var boService = TheApplication().GetService("PropertySetService");
var inputs = TheApplication().NewPropertySet();
var outputs = TheApplication().NewPropertySet();

// Tworzenie struktury bez numeracji
inputs.SetProperty("Child1", "Parent=Root;Name=First Child;ID=101");
inputs.SetProperty("SubChild1", "Parent=Child1;Name=First SubChild;Level=2");
inputs.SetProperty("Child2", "Parent=Root;Name=Second Child;ID=102");
inputs.SetProperty("SubChild2", "Parent=Child2;Name=Second SubChild;Level=2");

// Wywołanie Business Service
boService.InvokeMethod("BuildPropertySet", inputs, outputs);

// Pobranie utworzonego PropertySeta
var rootPropertySet = outputs.GetChild(0);

// Pobranie właściwości konkretnego węzła
inputs.Reset();
outputs.Reset();
inputs.SetProperty("Name", "Child1");
inputs.SetProperty("Key", "Name");
boService.InvokeMethod("GetProperty", inputs, outputs);
var child1Name = outputs.GetProperty("Value");
TheApplication().Trace("Nazwa Child1: " + child1Name);

// Pobranie wszystkich właściwości dla "Parent1"
inputs.Reset();
outputs.Reset();
inputs.SetProperty("Name", "Child1");
boService.InvokeMethod("GetAllProperties", inputs, outputs);
var allChild1Props = JSON.stringify(outputs);
TheApplication().Trace("Właściwości Child1: " + allChild1Props);

// Modyfikacja właściwości "Child2"
inputs.Reset();
outputs.Reset();
inputs.SetProperty("Name", "Child2");
inputs.SetProperty("Properties", "Name=Updated Child2;Age=30");
boService.InvokeMethod("SetProperty", inputs, outputs);

// Sprawdzenie zmian
inputs.Reset();
outputs.Reset();
inputs.SetProperty("Name", "Child2");
boService.InvokeMethod("GetAllProperties", inputs, outputs);
var updatedChild2Props = JSON.stringify(outputs);
TheApplication().Trace("Zaktualizowane właściwości Child2: " + updatedChild2Props);



function PerformanceTest() {
    var testSizes = [10, 100, 1000, 10000, 100000, 1000000];
    
    for (var i = 0; i < testSizes.length; i++) {
        var size = testSizes[i];
        TheApplication().Trace("Test dla " + size + " rekordów:");

        // Test: PropertySetBuilder
        var start1 = new Date().getTime();
        var builder = new PropertySetBuilder();
        for (var j = 0; j < size; j++) {
            var name = "Node" + j;
            builder.addChild(name, "Root");
            builder.setProperties(name, "Key1=Value" + j + ";Key2=Extra" + j);
        }
        var psBuilder = builder.get();
        var end1 = new Date().getTime();
        TheApplication().Trace("PropertySetBuilder: " + (end1 - start1) + " ms");

        // Test: Standardowe PropertySety
        var start2 = new Date().getTime();
        var rootPs = TheApplication().NewPropertySet();
        rootPs.SetType("Root");
        for (var k = 0; k < size; k++) {
            var child = TheApplication().NewPropertySet();
            child.SetType("Node" + k);
            child.SetProperty("Key1", "Value" + k);
            child.SetProperty("Key2", "Extra" + k);
            rootPs.AddChild(child);
        }
        var end2 = new Date().getTime();
        TheApplication().Trace("Standard PropertySet: " + (end2 - start2) + " ms");

        // Pobieranie danych: PropertySetBuilder
        var start3 = new Date().getTime();
        var value1 = builder.getProperty("Node" + (size - 1), "Key1");
        var end3 = new Date().getTime();
        TheApplication().Trace("Pobranie PropertySetBuilder: " + (end3 - start3) + " ms");

        // Pobieranie danych: Standard PropertySet
        var start4 = new Date().getTime();
        var nodeFound = null;
        for (var c = 0; c < rootPs.GetChildCount(); c++) {
            var childNode = rootPs.GetChild(c);
            if (childNode.GetType() === "Node" + (size - 1)) {
                nodeFound = childNode.GetProperty("Key1");
                break;
            }
        }
        var end4 = new Date().getTime();
        TheApplication().Trace("Pobranie Standard PropertySet: " + (end4 - start4) + " ms");

        TheApplication().Trace("---------------------------------------");
    }
}
