var boService = TheApplication().GetService("PropertySetService");
var inputs = TheApplication().NewPropertySet();
var outputs = TheApplication().NewPropertySet();

// Tworzenie struktury bez numeracji
inputs.SetProperty("Child1", "Parent=Root;Name=First Child;ID=101");
inputs.SetProperty("SubChild1", "Parent=Child1;Name=First SubChild;Level=2");
inputs.SetProperty("Child2", "Parent=Root;Name=Second Child;ID=102");
inputs.SetProperty("SubChild2", "Parent=Child2;Name=Second SubChild;Level=2");

// Wywołanie Business Service
boService.InvokeMethod("BuildPropertySet", inputs, outputs);

// Pobranie utworzonego PropertySeta
var rootPropertySet = outputs.GetChild(0);

// Pobranie właściwości konkretnego węzła
inputs.Reset();
outputs.Reset();
inputs.SetProperty("Name", "Child1");
inputs.SetProperty("Key", "Name");
boService.InvokeMethod("GetProperty", inputs, outputs);
var child1Name = outputs.GetProperty("Value");
TheApplication().Trace("Nazwa Child1: " + child1Name);

// Pobranie wszystkich właściwości dla "Parent1"
inputs.Reset();
outputs.Reset();
inputs.SetProperty("Name", "Child1");
boService.InvokeMethod("GetAllProperties", inputs, outputs);
var allChild1Props = JSON.stringify(outputs);
TheApplication().Trace("Właściwości Child1: " + allChild1Props);

// Modyfikacja właściwości "Child2"
inputs.Reset();
outputs.Reset();
inputs.SetProperty("Name", "Child2");
inputs.SetProperty("Properties", "Name=Updated Child2;Age=30");
boService.InvokeMethod("SetProperty", inputs, outputs);

// Sprawdzenie zmian
inputs.Reset();
outputs.Reset();
inputs.SetProperty("Name", "Child2");
boService.InvokeMethod("GetAllProperties", inputs, outputs);
var updatedChild2Props = JSON.stringify(outputs);
TheApplication().Trace("Zaktualizowane właściwości Child2: " + updatedChild2Props);
