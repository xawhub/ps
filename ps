// Business Service do tworzenia hierarchii PropertySet w eScript Siebel
function PropertySetBuilder() {
    this.root = TheApplication().NewPropertySet();
    this.current = this.root;
    this.childIndex = 0; // Dynamiczny licznik dzieci
}

// Ustawia typ głównego PropertySet
PropertySetBuilder.prototype.setType = function(type) {
    this.root.SetType(type);
    return this;
};

// Pobiera typ bieżącego PropertySet
PropertySetBuilder.prototype.getType = function() {
    return this.current.GetType();
};

// Dodaje właściwość do bieżącego PropertySet
PropertySetBuilder.prototype.addProperty = function(name, value) {
    this.current.SetProperty(name, value);
    return this;
};

// Pobiera wartość właściwości z bieżącego PropertySet
PropertySetBuilder.prototype.getProperty = function(name) {
    return this.current.GetProperty(name);
};

// Tworzy i przechodzi do nowego zagnieżdżonego PropertySet
PropertySetBuilder.prototype.addChild = function(type) {
    var child = TheApplication().NewPropertySet();
    child.SetType(type);
    this.current.AddChild(child);
    this.current = child;
    this.childIndex++;
    return this;
};

// Tworzy i dodaje nowy PropertySet do podanego rodzica
PropertySetBuilder.prototype.addChildToParent = function(parent, type) {
    var child = TheApplication().NewPropertySet();
    child.SetType(type);
    parent.AddChild(child);
    return child;
};

// Pobiera liczbę dzieci w bieżącym PropertySet
PropertySetBuilder.prototype.getChildCount = function() {
    return this.current.GetChildCount();
};

// Wraca do nadrzędnego PropertySet
PropertySetBuilder.prototype.up = function() {
    var parent = this.findParent(this.root, this.current);
    if (parent) {
        this.current = parent;
    }
    return this;
};

// Pobiera finalny PropertySet
PropertySetBuilder.prototype.get = function() {
    return this.root;
};

// Znajduje nadrzędny PropertySet dla podanego dziecka
PropertySetBuilder.prototype.findParent = function(parent, child) {
    for (var i = 0; i < parent.GetChildCount(); i++) {
        var temp = parent.GetChild(i);
        if (temp === child) {
            return parent;
        }
        var found = this.findParent(temp, child);
        if (found) {
            return found;
        }
    }
    return null;
};

PropertySetBuilder.prototype.buildFromInputs = function(inputs) {
    var rootType = inputs.GetProperty("RootType") || "Root";
    this.setType(rootType);

    var parentMap = {}; // Słownik przechowujący referencje do rodziców
    parentMap["Root"] = this.root;

    var childIndex = 0;
    while (inputs.GetProperty("Child" + childIndex + "Type")) {
        var childType = inputs.GetProperty("Child" + childIndex + "Type");
        var parentType = inputs.GetProperty("Child" + childIndex + "Parent") || "Root";

        var parent = parentMap[parentType] || this.root;
        var child = this.addChildToParent(parent, childType);

        parentMap[childType] = child; // Zapisujemy referencję do nowego dziecka

        var propIndex = 0;
        while (inputs.GetProperty("Child" + childIndex + "Prop" + propIndex + "Name")) {
            var propName = inputs.GetProperty("Child" + childIndex + "Prop" + propIndex + "Name");
            var propValue = inputs.GetProperty("Child" + childIndex + "Prop" + propIndex + "Value");
            if (propName && propValue) {
                child.SetProperty(propName, propValue);
            }
            propIndex++;
        }
        childIndex++;
    }
    return this;
};

// Implementacja Business Service
function Service_PreInvokeMethod(MethodName, Inputs, Outputs) {
    if (MethodName == "BuildPropertySet") {
        var builder = new PropertySetBuilder();
        builder.buildFromInputs(Inputs);
        Outputs.AddChild(builder.get());
        return CancelOperation;
    }
    return ContinueOperation;
}



function CallPropertySetService() {
    inputs.SetProperty("Child0Type", "ParentNode");
    inputs.SetProperty("Child0Parent", "Root");

    inputs.SetProperty("Child1Type", "ChildNode1");
    inputs.SetProperty("Child1Parent", "ParentNode");

    inputs.SetProperty("Child2Type", "ChildNode2");
    inputs.SetProperty("Child2Parent", "ParentNode");

    inputs.SetProperty("Child3Type", "GrandChild");
    inputs.SetProperty("Child3Parent", "ChildNode1");
    var svc = TheApplication().GetService("PropertySetService"); // Pobranie Business Service
    var inputs = TheApplication().NewPropertySet();
    var outputs = TheApplication().NewPropertySet();

    // Definiowanie dynamicznej struktury PropertySet
    inputs.SetProperty("RootType", "CustomRoot");
    inputs.SetProperty("ChildCount", "2");

    // Definiowanie pierwszego dziecka
    inputs.SetProperty("Child0Type", "FirstChild");
    inputs.SetProperty("Child0PropCount", "2");
    inputs.SetProperty("Child0Prop0Name", "FirstName");
    inputs.SetProperty("Child0Prop0Value", "John");
    inputs.SetProperty("Child0Prop1Name", "LastName");
    inputs.SetProperty("Child0Prop1Value", "Doe");

    // Definiowanie drugiego dziecka
    inputs.SetProperty("Child1Type", "SecondChild");
    inputs.SetProperty("Child1PropCount", "1");
    inputs.SetProperty("Child1Prop0Name", "Age");
    inputs.SetProperty("Child1Prop0Value", "30");

    // Wywołanie Business Service
    svc.InvokeMethod("BuildPropertySet", inputs, outputs);

    // Pobranie wynikowego PropertySet
    var resultPS = outputs.GetChild(0);
    
    // Debugowanie - wyświetlenie struktury PropertySet
    TheApplication().RaiseErrorText(resultPS.ToString());
}
