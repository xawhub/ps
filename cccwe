function PropertySetBuilder() {
    var app = TheApplication();
    this.root = app.NewPropertySet();
    this.root.SetType("Root");
    this.propertySets = { "Root": this.root }; // Mapa do przechowywania PropertySetÃ³w
}

// Tworzy nowy PropertySet i dodaje go jako dziecko `Root`
PropertySetBuilder.prototype.addChild = function(name, parentName) {
    var parent = this.propertySets[parentName];
    
    if (!parent) {
        TheApplication().Trace("BÅ‚Ä…d: Nie znaleziono rodzica '" + parentName + "' dla '" + name + "'.");
        TheApplication().RaiseErrorText("BÅ‚Ä…d: Brak nadrzÄ™dnego PropertySetu.");
    }

    var child = TheApplication().NewPropertySet();
    child.SetType(name);
    parent.AddChild(child);
    
    this.propertySets[name] = child; // ðŸ”¹ Upewniamy siÄ™, Å¼e dodajemy do mapy
    return child;
};

// Ustawia wÅ‚aÅ›ciwoÅ›ci w PropertySet (bez `split()`)
PropertySetBuilder.prototype.setProperties = function(name, propertiesString) {
    var ps = this.propertySets[name];

    if (!ps) {
        TheApplication().Trace("BÅ‚Ä…d: PropertySet '" + name + "' nie istnieje.");
        TheApplication().RaiseErrorText("BÅ‚Ä…d: PropertySet nie znaleziony.");
    }

    var key = "", value = "", isKey = true, len = propertiesString.length;

    for (var i = 0; i < len; i++) {
        var ch = propertiesString[i];

        if (ch === '=') {
            isKey = false;
        } else if (ch === ';' || i === len - 1) {
            if (i === len - 1 && ch !== ';') value += ch;
            ps.SetProperty(key, value);
            key = "";
            value = "";
            isKey = true;
        } else {
            if (isKey) key += ch;
            else value += ch;
        }
    }
};

// Pobiera PropertySet po nazwie
PropertySetBuilder.prototype.getPropertySet = function(name) {
    return this.propertySets[name];
};

// Tworzy strukturÄ™ PropertySet na podstawie Inputs
PropertySetBuilder.prototype.buildFromInputs = function(inputs) {
    var propNames = inputs.GetPropertyNames();
    var len = propNames.length, name = "", props = "", i = 0, parent = "Root";

    while (i < len) {
        var ch = propNames[i];

        if (ch === ',') {
            var parentStart = props.indexOf("Parent=");
            if (parentStart !== -1) {
                var parentEnd = props.indexOf(";", parentStart);
                if (parentEnd === -1) parentEnd = props.length;
                parent = props.substring(parentStart + 7, parentEnd);
            } else {
                parent = "Root";
            }

            this.addChild(name, parent);
            this.setProperties(name, props);
            name = "";
            props = "";
        } else {
            name += ch;
        }
        i++;
    }
};

// Pobiera gÅ‚Ã³wny PropertySet (Root)
PropertySetBuilder.prototype.get = function() {
    return this.root;
};
