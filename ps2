// Business Service do tworzenia hierarchii PropertySet w eScript Siebel
function PropertySetBuilder() {
    this.root = TheApplication().NewPropertySet();
    this.root.SetType("Root");
    this.childIndex = 0; // Dynamiczny licznik dzieci
}

// Tworzy i dodaje nowy PropertySet do podanego rodzica
PropertySetBuilder.prototype.addChildToParent = function(parent, type) {
    if (!parent || typeof parent.AddChild !== "function") {
        TheApplication().RaiseErrorText("Błąd: Nie znaleziono prawidłowego rodzica dla typu " + type);
    }

    var child = TheApplication().NewPropertySet();
    child.SetType(type);
    parent.AddChild(child);
    return child;
};

// Budowanie PropertySet na podstawie Inputs
PropertySetBuilder.prototype.buildFromInputs = function(inputs) {
    var rootType = inputs.GetProperty("RootType") || "Root";
    this.root.SetType(rootType);

    var parentMap = { "Root": this.root }; // Inicjalizacja Root jako rodzica

    var childIndex = 0;
    while (inputs.GetProperty("Child" + childIndex + "Type")) {
        var childType = inputs.GetProperty("Child" + childIndex + "Type");
        var parentType = inputs.GetProperty("Child" + childIndex + "Parent") || "Root";

        var parent = parentMap[parentType]; // Pobierz rodzica z mapy

        if (!parent) {  
            TheApplication().RaiseErrorText("Błąd: Nie znaleziono rodzica '" + parentType + "' dla '" + childType + "'");
        }

        var child = this.addChildToParent(parent, childType);

        parentMap[childType] = child; // Zapisujemy referencję do nowego dziecka

        var propIndex = 0;
        while (inputs.GetProperty("Child" + childIndex + "Prop" + propIndex + "Name")) {
            var propName = inputs.GetProperty("Child" + childIndex + "Prop" + propIndex + "Name");
            var propValue = inputs.GetProperty("Child" + childIndex + "Prop" + propIndex + "Value");
            if (propName && propValue) {
                child.SetProperty(propName, propValue);
            }
            propIndex++;
        }
        childIndex++;
    }
    return this;
};

// Pobiera finalny PropertySet
PropertySetBuilder.prototype.get = function() {
    return this.root;
};

// Implementacja Business Service
function Service_PreInvokeMethod(MethodName, Inputs, Outputs) {
    if (MethodName == "BuildPropertySet") {
        var builder = new PropertySetBuilder();
        builder.buildFromInputs(Inputs);
        Outputs.AddChild(builder.get());
        return CancelOperation;
    }
    return ContinueOperation;
}
