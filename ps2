// Business Service do tworzenia hierarchii PropertySet w eScript Siebel
function PropertySetBuilder() {
    this.root = TheApplication().NewPropertySet();
    this.root.SetType("Root");
    this.childIndex = 0; // Dynamiczny licznik dzieci
}

// Tworzy i dodaje nowy PropertySet do podanego rodzica
PropertySetBuilder.prototype.addChildToParent = function(parent, type) {
    if (!parent || typeof parent.AddChild !== "function") {
        TheApplication().RaiseErrorText("Błąd: Nie znaleziono prawidłowego rodzica dla typu " + type);
    }

    var child = TheApplication().NewPropertySet();
    child.SetType(type);
    parent.AddChild(child);
    return child;
};

// Budowanie PropertySet na podstawie Inputs
PropertySetBuilder.prototype.buildFromInputs = function(inputs) {
    var rootType = inputs.GetProperty("RootType");
    if (!rootType || rootType == "") {
        rootType = "Root"; // Domyślny typ, jeśli nie podano RootType
    }
    this.root.SetType(rootType);

    var parentMap = { "Root": this.root }; // Inicjalizacja Root jako rodzica

    var childIndex = 0;
    while (inputs.GetProperty("Child" + childIndex + "Type")) {
        var childType = inputs.GetProperty("Child" + childIndex + "Type");

        var parentType = inputs.GetProperty("Child" + childIndex + "Parent");
        if (!parentType || parentType == "") {
            parentType = "Root"; // Domyślny rodzic, jeśli brak wartości
        }

        var parent = parentMap[parentType]; // Pobranie rodzica z mapy

        if (!parent) {  
            TheApplication().RaiseErrorText("Błąd: Nie znaleziono rodzica '" + parentType + "' dla '" + childType + "'. Sprawdź konfigurację wejściową.");
        }

        var child = this.addChildToParent(parent, childType);

        parentMap[childType] = child; // Zapisujemy referencję do nowego dziecka

        var propIndex = 0;
        while (inputs.GetProperty("Child" + childIndex + "Prop" + propIndex + "Name")) {
            var propName = inputs.GetProperty("Child" + childIndex + "Prop" + propIndex + "Name");
            var propValue = inputs.GetProperty("Child" + childIndex + "Prop" + propIndex + "Value");
            if (propName && propValue) {
                child.SetProperty(propName, propValue);
            }
            propIndex++;
        }
        childIndex++;
    }
    return this;
};

// Pobiera finalny PropertySet
PropertySetBuilder.prototype.get = function() {
    return this.root;
};

// Implementacja Business Service
function Service_PreInvokeMethod(MethodName, Inputs, Outputs) {
    if (MethodName == "BuildPropertySet") {
        var builder = new PropertySetBuilder();
        builder.buildFromInputs(Inputs);
        Outputs.AddChild(builder.get());
        return CancelOperation;
    }
    return ContinueOperation;
}



var svc = TheApplication().GetService("CallPropertySetService");
var inputs = TheApplication().NewPropertySet();
var outputs = TheApplication().NewPropertySet();

// Konfiguracja hierarchii
inputs.SetProperty("RootType", "Order");

// Pierwszy poziom
inputs.SetProperty("Child0Type", "Customer");
inputs.SetProperty("Child0Parent", "Root");

inputs.SetProperty("Child1Type", "Product");
inputs.SetProperty("Child1Parent", "Root");

// Drugi poziom (dziecko "Customer")
inputs.SetProperty("Child2Type", "Address");
inputs.SetProperty("Child2Parent", "Customer");

// Dodawanie właściwości do "Customer"
inputs.SetProperty("Child0Prop0Name", "FirstName");
inputs.SetProperty("Child0Prop0Value", "John");

inputs.SetProperty("Child0Prop1Name", "LastName");
inputs.SetProperty("Child0Prop1Value", "Doe");

// Dodawanie właściwości do "Address"
inputs.SetProperty("Child2Prop0Name", "City");
inputs.SetProperty("Child2Prop0Value", "New York");

// Uruchomienie Business Service
svc.InvokeMethod("BuildPropertySet", inputs, outputs);

// Pobranie wyniku
var resultPS = outputs.GetChild(0);
TheApplication().RaiseErrorText(resultPS.GetType()); // Powinno zwrócić "Order"
