// Przykład użycia testu
var psTest = TheApplication().NewPropertySet();
psTest.SetProperty("RootName", "Customers");
psTest.SetProperty("RecordPrefix", "Customer");

var psOutput = TheApplication().NewPropertySet();
TestPerformance(psTest, psOutput);

for (var i = 0; i < psOutput.GetChildCount(); i++) {
    var psResult = psOutput.GetChild(i);
    TheApplication().Trace("Iterations: " + psResult.GetProperty("Iterations") + ", Execution Time: " + psResult.GetProperty("ExecutionTime") + "ms");
}

// Cały kod Business Service
function Service_PreInvokeMethod(MethodName, Inputs, Outputs) {
    if (MethodName === "AddOrUpdateRecords") {
        AddOrUpdateRecords(Inputs, Outputs);
        return CancelOperation;
    } else if (MethodName === "TestPerformance") {
        TestPerformance(Inputs, Outputs);
        return CancelOperation;
    } else if (MethodName === "GetValueFromPath") {
        GetValueFromPath(Inputs, Outputs);
        return CancelOperation;
    } else if (MethodName === "GetRecordsFromPath") {
        GetRecordsFromPath(Inputs, Outputs);
        return CancelOperation;
    }
    return ContinueOperation;
}

function GetValueFromPath(inputs, outputs) {
    var path = inputs.GetProperty("Path");
    var psRoot = inputs.GetChild(0);
    var psTarget = NavigateToPath(psRoot, path, false);
    if (psTarget) {
        outputs.SetProperty("Value", psTarget.GetValue());
    }
}

function GetRecordsFromPath(inputs, outputs) {
    var path = inputs.GetProperty("Path");
    var psRoot = inputs.GetChild(0);
    var psTarget = NavigateToPath(psRoot, path, false);
    if (psTarget) {
        for (var i = 0; i < psTarget.GetChildCount(); i++) {
            var record = psTarget.GetChild(i);
            var psOutput = TheApplication().NewPropertySet();
            psOutput.SetType(record.GetType());
            for (var j = 0; j < record.GetPropertyCount(); j++) {
                var key = record.GetPropertyName(j);
                psOutput.SetProperty(key, record.GetProperty(key));
            }
            outputs.AddChild(psOutput);
        }
    }
}

function TestPerformance(inputs, outputs) {
    var app = TheApplication();
    var rootName = inputs.GetProperty("RootName"); // np. Customers, Products, Invoices
    var recordPrefix = inputs.GetProperty("RecordPrefix"); // np. Customer, Product, Invoice
    var testSizes = [10, 1000, 100000];
    var psResults = app.NewPropertySet();
    
    for (var i = 0; i < testSizes.length; i++) {
        var iterations = testSizes[i];
        var psRoot, startTime, endTime;
        psRoot = app.NewPropertySet();
        startTime = new Date().getTime();
        
        for (var j = 0; j < iterations; j++) {
            var psRecord = app.NewPropertySet();
            psRecord.SetType(recordPrefix + j);
            psRecord.SetProperty("Attribute", "Value_" + j);
            psRoot.AddChild(psRecord);
        }
        
        endTime = new Date().getTime();
        var timeTaken = endTime - startTime;
        var psResult = app.NewPropertySet();
        psResult.SetProperty("Iterations", iterations);
        psResult.SetProperty("ExecutionTime", timeTaken);
        psResults.AddChild(psResult);
        
        SaveResultsToFile(rootName, recordPrefix, iterations, timeTaken);
    }
    outputs.AddChild(psResults);
}

function SaveResultsToFile(rootName, recordPrefix, iterations, timeTaken) {
    var app = TheApplication();
    var fileName = "C:\\SiebelLog\\PerformanceTest.txt";
    var fileService = app.GetService("FINS Data Export Service");
    var psInputs = app.NewPropertySet();
    var psOutputs = app.NewPropertySet();
    
    psInputs.SetProperty("FileName", fileName);
    psInputs.SetProperty("Append", "true");
    psInputs.SetProperty("Data", "Root: " + rootName + ", Prefix: " + recordPrefix + ", Iterations: " + iterations + ", Time: " + timeTaken + "ms\n");
    fileService.InvokeMethod("WriteToFile", psInputs, psOutputs);
}
