// Business Service do zarządzania hierarchią PropertySet w Siebel eScript
function PropertySetBuilder() {
    this.root = TheApplication().NewPropertySet();
    this.root.SetType("Root");
    this.propertySets = { "Root": this.root }; // Mapa do przechowywania referencji do PropertySetów
}

// Tworzy nowy PropertySet na podstawie unikalnej nazwy i rodzica
PropertySetBuilder.prototype.addChild = function(name, parentName) {
    var parent = this.propertySets[parentName];
    if (!parent) {
        TheApplication().RaiseErrorText("Błąd: Nie znaleziono rodzica '" + parentName + "' dla '" + name + "'.");
    }

    var child = TheApplication().NewPropertySet();
    child.SetType(name);
    parent.AddChild(child);
    this.propertySets[name] = child; // Przechowujemy referencję
    return child;
};

// Ustawia wartości właściwości w PropertySet
PropertySetBuilder.prototype.setProperties = function(name, propertiesString) {
    var ps = this.propertySets[name];
    if (!ps) {
        TheApplication().RaiseErrorText("Błąd: PropertySet '" + name + "' nie istnieje.");
    }
    
    var properties = propertiesString.split(";");
    for (var i = 0; i < properties.length; i++) {
        var pair = properties[i].split("=");
        if (pair.length === 2) {
            ps.SetProperty(pair[0].trim(), pair[1].trim());
        }
    }
};

// Pobiera wartość właściwości dla danego PropertySet
PropertySetBuilder.prototype.getProperty = function(name, key) {
    var ps = this.propertySets[name];
    return ps ? ps.GetProperty(key) : null;
};

// Pobiera wszystkie właściwości jako obiekt
PropertySetBuilder.prototype.getAllProperties = function(name) {
    var ps = this.propertySets[name];
    if (!ps) return null;

    var properties = {};
    var propNames = ps.GetPropertyNames().split(",");
    for (var i = 0; i < propNames.length; i++) {
        var propName = propNames[i].trim();
        if (propName) {
            properties[propName] = ps.GetProperty(propName);
        }
    }
    return properties;
};

// Tworzy strukturę PropertySet na podstawie Inputs
PropertySetBuilder.prototype.buildFromInputs = function(inputs) {
    var propNames = inputs.GetPropertyNames().split(",");
    for (var i = 0; i < propNames.length; i++) {
        var name = propNames[i].trim();
        if (name) {
            var props = inputs.GetProperty(name);
            var parentMatch = props.match(/Parent=([^;]+)/);
            var parent = parentMatch ? parentMatch[1].trim() : "Root";
            this.addChild(name, parent);
            this.setProperties(name, props);
        }
    }
};

// Pobiera PropertySet po nazwie
PropertySetBuilder.prototype.getPropertySet = function(name) {
    return this.propertySets[name] || null;
};

// Pobiera główny PropertySet (root)
PropertySetBuilder.prototype.get = function() {
    return this.root;
};
